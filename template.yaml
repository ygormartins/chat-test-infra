AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: Infrastructure provisioning for a serverless, performant and cost-efficient proof-of-concept chat application built with free tier AWS resources.

Globals:
  Function:
    Timeout: 180
    Handler: bootstrap.is.the.handler
    Runtime: provided.al2
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    Auth:
      AddDefaultAuthorizerToCorsPreflight: false
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn

Resources:
  WebSocketStack:
    Type: "AWS::Serverless::Application"
    Properties:
      Location: websocket.yaml
      Parameters:
        UserPool: !Ref UserPool
        UserPoolClient: !Ref UserPoolClient
        MainTable: !Ref MainTable

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ChatApp-UserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: name
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ChatApp-Client
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      GenerateSecret: true
      UserPoolId: !Ref UserPool

  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MainTable
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: sortKey
          AttributeType: S
        - AttributeName: gsi1PK
          AttributeType: S
        - AttributeName: gsi1SK
          AttributeType: S
        - AttributeName: gsi2PK
          AttributeType: S
        - AttributeName: gsi2SK
          AttributeType: S
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: sortKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1PK
              KeyType: HASH
            - AttributeName: gsi1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: gsi2PK
              KeyType: HASH
            - AttributeName: gsi2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  PublicMediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: chat-app-public-media
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"

  PublicMediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicMediaBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Join
              - ""
              - - !GetAtt PublicMediaBucket.Arn
                - /*
            Principal: "*"

  GetUserInfoLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/get-user-info-lambda
      FunctionName: APIGetUserInfoLambda
      Environment:
        Variables:
          USERPOOL_ID: !Ref UserPool
      Events:
        RestAPI:
          Type: Api
          Properties:
            Path: /user
            Method: get
      Policies:
        - Statement:
            - Sid: CognitoFullAccessPolicy
              Effect: Allow
              Action: cognito-idp:*
              Resource: !GetAtt UserPool.Arn

  PostConfirmationLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/cognito-post-confirmation-lambda
      FunctionName: CognitoPostConfirmationLambda
      Environment:
        Variables:
          PUBLIC_BUCKET: !Ref PublicMediaBucket
      Events:
        CognitoEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation
      Policies:
        - S3WritePolicy:
            BucketName: !Ref PublicMediaBucket

  DynamoDBStreamProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/lambda/dynamodb-stream-processor
      FunctionName: DynamoDBStreamProcessorLambda
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          USERPOOL_ID: !Ref UserPool
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MainTable.StreamArn
            BatchSize: 100
            StartingPosition: LATEST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTable
        - Statement:
            - Sid: CognitoFullAccessPolicy
              Effect: Allow
              Action: cognito-idp:*
              Resource: !GetAtt UserPool.Arn

Outputs:
  RestAPI:
    Description: API Gateway URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/"

  WebSocketAPI:
    Description: WebSocket API URL
    Value: !GetAtt WebSocketStack.Outputs.WebSocketAPI

  PublicBucketURL:
    Description: URL for fetching resources from the public bucket
    Value: !GetAtt PublicMediaBucket.DomainName
